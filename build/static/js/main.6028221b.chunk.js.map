{"version":3,"sources":["components/StepInput.js","components/StepOne.js","services/accounts.js","components/StepTwo.js","components/StepThree.js","components/Notification.js","services/profile.js","App.js","index.js"],"names":["StepInput","props","label","type","inputID","value","onChange","id","StepOne","profile","saveBudget","useState","startingBudget","setStartingBudget","className","event","val","parseInt","target","onClick","baseUrl","axios","get","newObject","post","put","delete","StepTwo","accounts","setAccounts","calculateBudgets","accountValues","setAccountValues","map","singleAccount","name","e","newAccounts","forEach","account","push","handleNameChange","currSpend","handleCurrSpendChange","desiredSpend","handleDesiredSpendChange","accountService","then","filteredAccounts","filter","preventDefault","accountObject","length","response","concat","data","promises","Promise","all","updateAllAccounts","StepThree","newDaily","Notification","message","messageType","newData","patch","App","setProfile","setMessage","setMessageType","showApp","setShowApp","useEffect","profileService","newBudget","currDate","Date","now","currDay","getDate","currMonth","getMonth","daysRemaining","newAccts","Math","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6028221b.chunk.js","sourcesContent":["import React from 'react'\n\nconst StepInput = (props) => {\n  const { label, type, inputID, value, onChange } = props\n  return (\n    <label>\n      {label}\n      <input\n        type={type}\n        id={inputID}\n        value={value}\n        onChange={onChange} />\n    </label>\n  )\n}\n\nexport default StepInput","import React, { useState } from 'react'\nimport StepInput from './StepInput'\n\nconst StepOne = (props) => {\n  \n  const { profile, saveBudget} = props\n  const [startingBudget, setStartingBudget] = useState(profile.startingBudget)\n\n  const handleStartingBudget = (event) => {\n    let val = parseInt(event.target.value)\n    if (val ) { setStartingBudget(val) }\n  }\n\n  return (\n    <div id=\"stepOne\" className=\"step\">\n      <h2>Step 1</h2>\n      <StepInput\n        label=\"What's your starting budget?\"\n        inputID=\"startingBudget\"\n        type=\"number\"\n        value={startingBudget}\n        onChange={handleStartingBudget} />\n      <br />\n      <button id=\"saveStepOne\" onClick={() => saveBudget(startingBudget)}>Save</button>\n    </div>\n  )\n}\n\nexport default StepOne","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/accounts'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst deleteAccount = (id) => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst updateAll = newObject => {\n  return axios.patch(baseUrl, newObject)\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n  deleteAccount,\n  updateAll\n}","import React, { useState } from 'react'\nimport StepInput from './StepInput'\nimport accountService from '../services/accounts'\n\nconst StepTwo = (props) => {\n  const { accounts, setAccounts, calculateBudgets } = props\n  const [accountValues, setAccountValues] = useState(accounts)\n\n  const handleNameChange = (id, e) => {\n    const newAccounts = []\n    accountValues.forEach(account => {\n      if(account.id === id) { account.name = e.target.value }\n      newAccounts.push(account)\n    });\n    setAccountValues(newAccounts)\n  }\n\n  const handleCurrSpendChange = (id, e) => {\n    const newAccounts = []\n    accountValues.forEach(account => {\n      if (account.id === id) { account.currSpend = parseInt(e.target.value) }\n      newAccounts.push(account)\n    });\n    setAccountValues(newAccounts)\n  }\n\n  const handleDesiredSpendChange = (id, e) => {\n    const newAccounts = []\n    accountValues.forEach(account => {\n      if (account.id === id) { account.desiredSpend = parseInt(e.target.value) }\n      newAccounts.push(account)\n    });\n    setAccountValues(newAccounts)\n  }\n\n  const updateAllAccounts = (newAccounts) => {\n    const promises = []\n    newAccounts.forEach(account => {\n      promises.push(\n        accountService.update(account.id, account)\n      )\n    })\n\n    Promise.all(promises).then(() => { setAccountValues(accounts) })\n\n    calculateBudgets()\n  }\n\n  const addAccount = (e) => {\n    e.preventDefault()\n    const accountObject = {\n      id: (\n        accounts.length === 0 ?\n          0 :\n          accounts[accounts.length - 1].id + 1),\n      name: \"\",\n      desiredSpend: 0,\n      currSpend: 0\n    }\n\n    accountService\n      .create(accountObject)\n      .then(response => {\n        setAccountValues(accounts.concat(response.data))\n        setAccounts(accounts.concat(response.data))\n      })\n  }\n\n  const removeAccount = (id) => {\n    accountService\n      .deleteAccount(id)\n      .then(() => {\n        const filteredAccounts = accounts.filter(account => {\n          if (account.id !== id) { return account }\n        })\n        setAccountValues(filteredAccounts)\n        setAccounts(filteredAccounts)\n      })\n  }\n\n  return (\n    <div className=\"step\" id=\"stepTwo\">\n      <h2>Step Two</h2>\n      <p>List out your current accounts as well as their budget</p>\n      <ul>\n        {accountValues.map(singleAccount => (\n          <li key={singleAccount.id}>\n            <StepInput\n              label=\"Name: \"\n              type=\"text\"\n              value={singleAccount.name}\n              onChange={(e) => handleNameChange(singleAccount.id, e)} />\n            <br />\n            <div className=\"input-group\">\n              <StepInput\n                label=\"Current Spend: \"\n                type=\"number\"\n                value={singleAccount.currSpend}\n                onChange={(e) => handleCurrSpendChange(singleAccount.id, e)} />\n              <StepInput\n                label=\"Desired Spend: \"\n                type=\"number\"\n                value={singleAccount.desiredSpend}\n                onChange={(e) => handleDesiredSpendChange(singleAccount.id, e)} />\n              </div>\n              <button\n                className=\"removeAccount\"\n                onClick={() => removeAccount(singleAccount.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n      <div className=\"button-group\">\n        <button onClick={addAccount}>Add Account</button>\n        <button onClick={() => updateAllAccounts(accountValues)}>Calculate</button>\n      </div>\n    </div>\n  )\n}\n\nexport default StepTwo","import React from 'react'\n\nconst StepThree = (props) => {\n  const { accounts } = props\n\n  return (\n    <div id=\"stepThree\" className=\"step\">\n      <h2>Step 3</h2>\n      <p>Final Calculations</p>\n      <ul>  \n        {accounts.map(account => (\n          <li key={account.id}>\n            <p><strong>Account:</strong> {account.name}<br />\n            <strong>New Budget:</strong> {account.newDaily !== null ? account.newDaily : ''}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default StepThree","import React from 'react'\n\nconst Notification = ({message, messageType=\"error\"}) => {\n  if(message === null) { return null }\n\n  return (\n    <div className={`notification ${messageType}`}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from \"axios\";\nconst baseUrl = \"http://localhost:3001/api/profile\"\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst updateAll = (newData) => {\n  return axios.patch(baseUrl, newData)\n}\n\nexport default { getAll, updateAll }","import React, {useState, useEffect} from 'react'\nimport StepOne from './components/StepOne';\nimport StepTwo from './components/StepTwo';\nimport StepThree from './components/StepThree';\nimport Notification from './components/Notification';\nimport accountService from './services/accounts'\nimport profileService from './services/profile'\nimport './App.css';\n\nconst App = () => {\n  const [profile, setProfile] = useState({})\n  const [accounts, setAccounts] = useState([])\n  const [message, setMessage] = useState(null)\n  const [messageType, setMessageType] = useState(null)\n  const [showApp, setShowApp] = useState(false)\n\n  useEffect(() => {\n    accountService\n      .getAll()\n      .then(response => {\n        setAccounts(response.data)\n      })\n\n    profileService\n      .getAll()\n      .then(response => {\n        setProfile(response.data)\n        setShowApp(true)\n      })\n  }, [])\n\n  const saveBudget = (newBudget) => {\n    const profileObj = { \"startingBudget\": newBudget }\n    profileService\n      .updateAll(profileObj)\n      .then(response => {\n        setProfile(response.data)\n      })\n  }\n\n  const calculateBudgets = () => {\n // get day of the month\n    let currDate = new Date(Date.now())\n    let currDay = currDate.getDate()\n    let currMonth = currDate.getMonth()\n    let daysRemaining = 0\n    \n    // cauclate days remaining in month\n    switch(currMonth) {\n      case 0:\n      case 2:\n      case 4:\n      case 6:\n      case 7:\n      case 9:\n      case 11:\n        daysRemaining = 31 - currDay;\n        break;\n      case 1:\n        daysRemaining = 28 - currDay;\n        break;\n      default:\n        daysRemaining = 30 - currDay;\n    }\n\n    const newAccts = []\n    accounts.forEach(account => {\n      // look at remaining amt for existing budgets, divide by remaining days\n      let newDaily = account.desiredSpend - account.currSpend\n      if (newDaily < 0) {\n        // If number is negative (overspend), set budget to 0\n        account.newDaily = 0\n      } else {\n        // Else, set new number\n        account.newDaily = Math.floor((newDaily / daysRemaining) * 100) / 100\n      }\n\n      newAccts.push(account)\n    })\n\n    const promises = []\n    newAccts.forEach(account => {\n      promises.push(\n        accountService.update(account.id, account)\n      )\n    })\n\n    Promise.all(promises).then(() => { setAccounts(newAccts) })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>AdWords Calculator v1</h1>\n      </header>\n      { showApp && \n        <main>\n          <div className=\"container\">\n            <h2>Outline</h2>\n            <h3>v2: Improvements</h3>\n            <ul>\n              <li>Host on Heroku</li>\n              <li>Add user account</li>\n              <li>Save projects per user account</li>\n            </ul>\n            <h3>v3: 3rd party</h3>\n            <ul>\n              <li>Add connection to google adwords</li>\n              <li>Add sync button to pull values and calculate new budgets</li>\n              <li>Send new budgets to adwords, save</li>\n            </ul>\n          </div>\n          <hr />\n          <div id=\"notificationBar\" className=\"container\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <Notification message={message} messageType={messageType} />\n              </div>\n            </div>\n          </div>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <StepOne \n                  profile={profile}\n                  saveBudget={saveBudget} />\n                <StepTwo\n                  accounts={accounts}\n                  setAccounts={setAccounts}\n                  setMessage={setMessage}\n                  setMessageType={setMessageType}\n                  calculateBudgets={calculateBudgets} />\n              </div>\n              <div className=\"col\">\n                <StepThree \n                  accounts={accounts}/>\n              </div>\n            </div>\n          </div>\n        </main>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}