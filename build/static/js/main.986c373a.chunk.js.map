{"version":3,"sources":["components/StepInput.js","services/accounts.js","components/StepTwo.js","components/StepThree.js","components/Notification.js","App.js","index.js"],"names":["StepInput","props","label","type","inputID","value","onChange","id","baseUrl","axios","get","newObject","post","put","delete","StepTwo","accounts","setAccounts","calculateBudgets","useState","accountValues","setAccountValues","className","map","singleAccount","name","e","newAccounts","forEach","account","target","push","handleNameChange","currSpend","parseInt","handleCurrSpendChange","desiredSpend","handleDesiredSpendChange","onClick","accountService","then","filteredAccounts","filter","preventDefault","response","concat","data","promises","Promise","all","updateAllAccounts","StepThree","newDaily","Notification","message","messageType","App","setMessage","setMessageType","showApp","setShowApp","useEffect","currDate","Date","now","currDay","getDate","currMonth","getMonth","daysRemaining","newAccts","Math","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.986c373a.chunk.js","sourcesContent":["import React from 'react'\n\nconst StepInput = (props) => {\n  const { label, type, inputID, value, onChange } = props\n  return (\n    <label>\n      {label}\n      <input\n        type={type}\n        id={inputID}\n        value={value}\n        onChange={onChange} />\n    </label>\n  )\n}\n\nexport default StepInput","import axios from 'axios'\nconst baseUrl = '/api/accounts'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst deleteAccount = (id) => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst updateAll = newObject => {\n  return axios.patch(baseUrl, newObject)\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n  deleteAccount,\n  updateAll\n}","import React, { useState } from 'react'\nimport StepInput from './StepInput'\nimport accountService from '../services/accounts'\n\nconst StepTwo = (props) => {\n  const { accounts, setAccounts, calculateBudgets } = props\n  const [accountValues, setAccountValues] = useState(accounts)\n\n  const handleNameChange = (id, e) => {\n    const newAccounts = []\n    accountValues.forEach(account => {\n      if(account.id === id) { account.name = e.target.value }\n      newAccounts.push(account)\n    });\n    setAccountValues(newAccounts)\n  }\n\n  const handleCurrSpendChange = (id, e) => {\n    const newAccounts = []\n    accountValues.forEach(account => {\n      if (account.id === id) { account.currSpend = parseInt(e.target.value) }\n      newAccounts.push(account)\n    });\n    setAccountValues(newAccounts)\n  }\n\n  const handleDesiredSpendChange = (id, e) => {\n    const newAccounts = []\n    accountValues.forEach(account => {\n      if (account.id === id) { account.desiredSpend = parseInt(e.target.value) }\n      newAccounts.push(account)\n    });\n    setAccountValues(newAccounts)\n  }\n\n  const updateAllAccounts = (newAccounts) => {\n    const promises = []\n    newAccounts.forEach(account => {\n      promises.push(\n        accountService.update(account.id, account)\n      )\n    })\n\n    Promise.all(promises).then(() => { setAccountValues(accounts) })\n\n    calculateBudgets()\n  }\n\n  const addAccount = (e) => {\n    e.preventDefault()\n    const accountObject = { name: \"Account\" }\n\n    accountService\n      .create(accountObject)\n      .then(response => {\n        setAccountValues(accounts.concat(response.data))\n        setAccounts(accounts.concat(response.data))\n      })\n  }\n\n  const removeAccount = (id) => {\n    accountService\n      .deleteAccount(id)\n      .then(() => {\n        const filteredAccounts = accounts.filter(account => {\n          if (account.id !== id) { return account }\n        })\n        setAccountValues(filteredAccounts)\n        setAccounts(filteredAccounts)\n      })\n  }\n\n  return (\n    <div className=\"step\" id=\"stepTwo\">\n      <h2>Instructions</h2>\n      <p>List out your current accounts, their current spend, and their desired spend. Once all accounts are in place, click on 'Calculate' and the app will generate new daily spends so that your accounts can better reach their allocated budgets.</p>\n      <ul>\n        {accountValues.map(singleAccount => (\n          <li key={singleAccount.id}>\n            <StepInput\n              label=\"Name: \"\n              type=\"text\"\n              value={singleAccount.name}\n              onChange={(e) => handleNameChange(singleAccount.id, e)} />\n            <br />\n            <div className=\"input-group\">\n              <StepInput\n                label=\"Current Spend: \"\n                type=\"number\"\n                value={singleAccount.currSpend}\n                onChange={(e) => handleCurrSpendChange(singleAccount.id, e)} />\n              <StepInput\n                label=\"Desired Spend: \"\n                type=\"number\"\n                value={singleAccount.desiredSpend}\n                onChange={(e) => handleDesiredSpendChange(singleAccount.id, e)} />\n              </div>\n              <button\n                className=\"removeAccount\"\n                onClick={() => removeAccount(singleAccount.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n      <div className=\"button-group\">\n        <button onClick={addAccount}>Add Account</button>\n        <button onClick={() => updateAllAccounts(accountValues)}>Calculate</button>\n      </div>\n    </div>\n  )\n}\n\nexport default StepTwo","import React from 'react'\n\nconst StepThree = (props) => {\n  const { accounts } = props\n\n  return (\n    <div id=\"stepThree\" className=\"step\">\n      <h2>Final Calculations</h2>\n      <ul>  \n        {accounts.map(account => (\n          <li key={account.id}>\n            <p><strong>Account:</strong> {account.name}<br />\n            <strong>New Budget:</strong> {account.newDaily !== null ? account.newDaily : ''}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default StepThree","import React from 'react'\n\nconst Notification = ({message, messageType=\"error\"}) => {\n  if(message === null) { return null }\n\n  return (\n    <div className={`notification ${messageType}`}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React, {useState, useEffect} from 'react'\n// import StepOne from './components/StepOne';\nimport StepTwo from './components/StepTwo';\nimport StepThree from './components/StepThree';\nimport Notification from './components/Notification';\nimport accountService from './services/accounts'\n// import profileService from './services/profile'\nimport './App.css';\n\nconst App = () => {\n  // const [profile, setProfile] = useState({})\n  const [accounts, setAccounts] = useState([])\n  const [message, setMessage] = useState(null)\n  const [messageType, setMessageType] = useState(null)\n  const [showApp, setShowApp] = useState(false)\n\n  useEffect(() => {\n    accountService\n      .getAll()\n      .then(response => {\n        setAccounts(response.data)\n        setShowApp(true)\n      })\n\n    // profileService\n    //   .getAll()\n    //   .then(response => {\n    //     setProfile(response.data)\n    //     setShowApp(true)\n    //   })\n  }, [])\n\n  // const saveBudget = (newBudget) => {\n  //   const profileObj = { \"startingBudget\": newBudget }\n  //   profileService\n  //     .updateAll(profileObj)\n  //     .then(response => {\n  //       setProfile(response.data)\n  //     })\n  // }\n\n  const calculateBudgets = () => {\n // get day of the month\n    let currDate = new Date(Date.now())\n    let currDay = currDate.getDate()\n    let currMonth = currDate.getMonth()\n    let daysRemaining = 0\n    \n    // cauclate days remaining in month\n    switch(currMonth) {\n      case 0:\n      case 2:\n      case 4:\n      case 6:\n      case 7:\n      case 9:\n      case 11:\n        daysRemaining = 31 - currDay;\n        break;\n      case 1:\n        daysRemaining = 28 - currDay;\n        break;\n      default:\n        daysRemaining = 30 - currDay;\n    }\n\n    const newAccts = []\n    accounts.forEach(account => {\n      // look at remaining amt for existing budgets, divide by remaining days\n      let newDaily = account.desiredSpend - account.currSpend\n      if (newDaily < 0) {\n        // If number is negative (overspend), set budget to 0\n        account.newDaily = 0\n      } else {\n        // Else, set new number\n        account.newDaily = Math.floor((newDaily / daysRemaining) * 100) / 100\n      }\n\n      newAccts.push(account)\n    })\n\n    const promises = []\n    newAccts.forEach(account => {\n      promises.push(\n        accountService.update(account.id, account)\n      )\n    })\n\n    Promise.all(promises).then(() => { setAccounts(newAccts) })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>AdWords Calculator v1</h1>\n      </header>\n      { showApp && \n        <main>\n          <div className=\"container\">\n            <h2>Outline</h2>\n            <h3>v2: Improvements</h3>\n            <ul>\n              <li>Host on Heroku</li>\n              <li>Add user account</li>\n              <li>Save projects per user account</li>\n            </ul>\n            <h3>v3: 3rd party</h3>\n            <ul>\n              <li>Add connection to google adwords</li>\n              <li>Add sync button to pull values and calculate new budgets</li>\n              <li>Send new budgets to adwords, save</li>\n            </ul>\n          </div>\n          <hr />\n          <div id=\"notificationBar\" className=\"container\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <Notification message={message} messageType={messageType} />\n              </div>\n            </div>\n          </div>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col\">\n                {/* <StepOne \n                  profile={profile}\n                  saveBudget={saveBudget} /> */}\n                <StepTwo\n                  accounts={accounts}\n                  setAccounts={setAccounts}\n                  setMessage={setMessage}\n                  setMessageType={setMessageType}\n                  calculateBudgets={calculateBudgets} />\n              </div>\n              <div className=\"col\">\n                <StepThree \n                  accounts={accounts}/>\n              </div>\n            </div>\n          </div>\n        </main>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}